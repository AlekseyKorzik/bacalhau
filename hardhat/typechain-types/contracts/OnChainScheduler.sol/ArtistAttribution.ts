/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ArtistAttribution {
  export type ArtistStruct = {
    id: PromiseOrValue<string>;
    wallet: PromiseOrValue<string>;
    metadata: PromiseOrValue<string>;
    escrow: PromiseOrValue<BigNumberish>;
    revenue: PromiseOrValue<BigNumberish>;
    numJobsRun: PromiseOrValue<BigNumberish>;
    isTrained: PromiseOrValue<boolean>;
  };

  export type ArtistStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    id: string;
    wallet: string;
    metadata: string;
    escrow: BigNumber;
    revenue: BigNumber;
    numJobsRun: BigNumber;
    isTrained: boolean;
  };

  export type ImageStruct = {
    id: PromiseOrValue<BigNumberish>;
    customer: PromiseOrValue<string>;
    artist: PromiseOrValue<string>;
    prompt: PromiseOrValue<string>;
    ipfsResult: PromiseOrValue<string>;
    errorMessage: PromiseOrValue<string>;
    isComplete: PromiseOrValue<boolean>;
    isCancelled: PromiseOrValue<boolean>;
  };

  export type ImageStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    boolean,
    boolean
  ] & {
    id: BigNumber;
    customer: string;
    artist: string;
    prompt: string;
    ipfsResult: string;
    errorMessage: string;
    isComplete: boolean;
    isCancelled: boolean;
  };
}

export interface ArtistAttributionInterface extends utils.Interface {
  functions: {
    "ArtistCancelled(string)": FunctionFragment;
    "ArtistComplete(string)": FunctionFragment;
    "CreateArtist(string,string)": FunctionFragment;
    "CreateImage(string,string)": FunctionFragment;
    "ImageCancelled(uint256,string)": FunctionFragment;
    "ImageComplete(uint256,string)": FunctionFragment;
    "adminWithdraw(address)": FunctionFragment;
    "artistChangeWallet(string,address)": FunctionFragment;
    "artistCommission()": FunctionFragment;
    "artistCost()": FunctionFragment;
    "artistWithdraw(string)": FunctionFragment;
    "computeProviderEscrow()": FunctionFragment;
    "computeProviderRevenue()": FunctionFragment;
    "deleteArtist(string)": FunctionFragment;
    "getArtist(string)": FunctionFragment;
    "getArtistCommission()": FunctionFragment;
    "getArtistCost()": FunctionFragment;
    "getArtistIDs()": FunctionFragment;
    "getCustomerImages(address)": FunctionFragment;
    "getImage(uint256)": FunctionFragment;
    "getImageCost()": FunctionFragment;
    "getImageIDs()": FunctionFragment;
    "imageCost()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCost(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ArtistCancelled"
      | "ArtistComplete"
      | "CreateArtist"
      | "CreateImage"
      | "ImageCancelled"
      | "ImageComplete"
      | "adminWithdraw"
      | "artistChangeWallet"
      | "artistCommission"
      | "artistCost"
      | "artistWithdraw"
      | "computeProviderEscrow"
      | "computeProviderRevenue"
      | "deleteArtist"
      | "getArtist"
      | "getArtistCommission"
      | "getArtistCost"
      | "getArtistIDs"
      | "getCustomerImages"
      | "getImage"
      | "getImageCost"
      | "getImageIDs"
      | "imageCost"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateCost"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ArtistCancelled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ArtistComplete",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "CreateArtist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "CreateImage",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ImageCancelled",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ImageComplete",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "artistChangeWallet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "artistCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "artistCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "artistWithdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeProviderEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeProviderRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteArtist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtistCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArtistCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArtistIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomerImages",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getImage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getImageCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImageIDs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "imageCost", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ArtistCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ArtistComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreateArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreateImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ImageCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ImageComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistChangeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "artistCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "artistWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeProviderEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeProviderRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getArtist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArtistCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtistCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtistIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomerImages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getImage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImageCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImageIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "imageCost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCost", data: BytesLike): Result;

  events: {
    "EventArtistCreated(tuple)": EventFragment;
    "EventImageCancelled(tuple)": EventFragment;
    "EventImageComplete(tuple)": EventFragment;
    "EventImageCreated(tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventArtistCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventImageCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventImageComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventImageCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface EventArtistCreatedEventObject {
  artist: ArtistAttribution.ArtistStructOutput;
}
export type EventArtistCreatedEvent = TypedEvent<
  [ArtistAttribution.ArtistStructOutput],
  EventArtistCreatedEventObject
>;

export type EventArtistCreatedEventFilter =
  TypedEventFilter<EventArtistCreatedEvent>;

export interface EventImageCancelledEventObject {
  image: ArtistAttribution.ImageStructOutput;
}
export type EventImageCancelledEvent = TypedEvent<
  [ArtistAttribution.ImageStructOutput],
  EventImageCancelledEventObject
>;

export type EventImageCancelledEventFilter =
  TypedEventFilter<EventImageCancelledEvent>;

export interface EventImageCompleteEventObject {
  image: ArtistAttribution.ImageStructOutput;
}
export type EventImageCompleteEvent = TypedEvent<
  [ArtistAttribution.ImageStructOutput],
  EventImageCompleteEventObject
>;

export type EventImageCompleteEventFilter =
  TypedEventFilter<EventImageCompleteEvent>;

export interface EventImageCreatedEventObject {
  image: ArtistAttribution.ImageStructOutput;
}
export type EventImageCreatedEvent = TypedEvent<
  [ArtistAttribution.ImageStructOutput],
  EventImageCreatedEventObject
>;

export type EventImageCreatedEventFilter =
  TypedEventFilter<EventImageCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ArtistAttribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArtistAttributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ArtistCancelled(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ArtistComplete(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    CreateArtist(
      id: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    CreateImage(
      _artistID: PromiseOrValue<string>,
      _prompt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ImageCancelled(
      _id: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ImageComplete(
      _id: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminWithdraw(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    artistChangeWallet(
      id: PromiseOrValue<string>,
      newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    artistCommission(overrides?: CallOverrides): Promise<[BigNumber]>;

    artistCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    artistWithdraw(
      id: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeProviderEscrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeProviderRevenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteArtist(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getArtist(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ArtistAttribution.ArtistStructOutput]>;

    getArtistCommission(overrides?: CallOverrides): Promise<[BigNumber]>;

    getArtistCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    getArtistIDs(overrides?: CallOverrides): Promise<[string[]]>;

    getCustomerImages(
      customerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getImage(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArtistAttribution.ImageStructOutput]>;

    getImageCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    getImageIDs(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    imageCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCost(
      _artistCost: PromiseOrValue<BigNumberish>,
      _imageCost: PromiseOrValue<BigNumberish>,
      _artistCommission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ArtistCancelled(
    id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ArtistComplete(
    id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  CreateArtist(
    id: PromiseOrValue<string>,
    metadata: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  CreateImage(
    _artistID: PromiseOrValue<string>,
    _prompt: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ImageCancelled(
    _id: PromiseOrValue<BigNumberish>,
    _errorMsg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ImageComplete(
    _id: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminWithdraw(
    to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  artistChangeWallet(
    id: PromiseOrValue<string>,
    newWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  artistCommission(overrides?: CallOverrides): Promise<BigNumber>;

  artistCost(overrides?: CallOverrides): Promise<BigNumber>;

  artistWithdraw(
    id: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeProviderEscrow(overrides?: CallOverrides): Promise<BigNumber>;

  computeProviderRevenue(overrides?: CallOverrides): Promise<BigNumber>;

  deleteArtist(
    id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getArtist(
    id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ArtistAttribution.ArtistStructOutput>;

  getArtistCommission(overrides?: CallOverrides): Promise<BigNumber>;

  getArtistCost(overrides?: CallOverrides): Promise<BigNumber>;

  getArtistIDs(overrides?: CallOverrides): Promise<string[]>;

  getCustomerImages(
    customerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getImage(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArtistAttribution.ImageStructOutput>;

  getImageCost(overrides?: CallOverrides): Promise<BigNumber>;

  getImageIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

  imageCost(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCost(
    _artistCost: PromiseOrValue<BigNumberish>,
    _imageCost: PromiseOrValue<BigNumberish>,
    _artistCommission: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ArtistCancelled(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ArtistComplete(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    CreateArtist(
      id: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    CreateImage(
      _artistID: PromiseOrValue<string>,
      _prompt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ImageCancelled(
      _id: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ImageComplete(
      _id: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    adminWithdraw(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    artistChangeWallet(
      id: PromiseOrValue<string>,
      newWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    artistCommission(overrides?: CallOverrides): Promise<BigNumber>;

    artistCost(overrides?: CallOverrides): Promise<BigNumber>;

    artistWithdraw(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeProviderEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    computeProviderRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    deleteArtist(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getArtist(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ArtistAttribution.ArtistStructOutput>;

    getArtistCommission(overrides?: CallOverrides): Promise<BigNumber>;

    getArtistCost(overrides?: CallOverrides): Promise<BigNumber>;

    getArtistIDs(overrides?: CallOverrides): Promise<string[]>;

    getCustomerImages(
      customerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getImage(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArtistAttribution.ImageStructOutput>;

    getImageCost(overrides?: CallOverrides): Promise<BigNumber>;

    getImageIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

    imageCost(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCost(
      _artistCost: PromiseOrValue<BigNumberish>,
      _imageCost: PromiseOrValue<BigNumberish>,
      _artistCommission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EventArtistCreated(tuple)"(artist?: null): EventArtistCreatedEventFilter;
    EventArtistCreated(artist?: null): EventArtistCreatedEventFilter;

    "EventImageCancelled(tuple)"(image?: null): EventImageCancelledEventFilter;
    EventImageCancelled(image?: null): EventImageCancelledEventFilter;

    "EventImageComplete(tuple)"(image?: null): EventImageCompleteEventFilter;
    EventImageComplete(image?: null): EventImageCompleteEventFilter;

    "EventImageCreated(tuple)"(image?: null): EventImageCreatedEventFilter;
    EventImageCreated(image?: null): EventImageCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ArtistCancelled(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ArtistComplete(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    CreateArtist(
      id: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    CreateImage(
      _artistID: PromiseOrValue<string>,
      _prompt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ImageCancelled(
      _id: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ImageComplete(
      _id: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminWithdraw(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    artistChangeWallet(
      id: PromiseOrValue<string>,
      newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    artistCommission(overrides?: CallOverrides): Promise<BigNumber>;

    artistCost(overrides?: CallOverrides): Promise<BigNumber>;

    artistWithdraw(
      id: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeProviderEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    computeProviderRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    deleteArtist(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getArtist(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtistCommission(overrides?: CallOverrides): Promise<BigNumber>;

    getArtistCost(overrides?: CallOverrides): Promise<BigNumber>;

    getArtistIDs(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomerImages(
      customerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImage(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImageCost(overrides?: CallOverrides): Promise<BigNumber>;

    getImageIDs(overrides?: CallOverrides): Promise<BigNumber>;

    imageCost(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCost(
      _artistCost: PromiseOrValue<BigNumberish>,
      _imageCost: PromiseOrValue<BigNumberish>,
      _artistCommission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ArtistCancelled(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ArtistComplete(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    CreateArtist(
      id: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    CreateImage(
      _artistID: PromiseOrValue<string>,
      _prompt: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ImageCancelled(
      _id: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ImageComplete(
      _id: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminWithdraw(
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    artistChangeWallet(
      id: PromiseOrValue<string>,
      newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    artistCommission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    artistCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    artistWithdraw(
      id: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeProviderEscrow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeProviderRevenue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteArtist(
      id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getArtist(
      id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtistCommission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtistCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getArtistIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCustomerImages(
      customerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImage(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImageCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImageIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    imageCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCost(
      _artistCost: PromiseOrValue<BigNumberish>,
      _imageCost: PromiseOrValue<BigNumberish>,
      _artistCommission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
