# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  linux:
    machine:
      image: ubuntu-2204:2022.04.2
    resource_class: xlarge

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    parallelism: 4
    environment:
      GOVER: 1.18.3
      GOLANGCILINT_VERSION: v1.46.2
      IPFS_VERSION: v0.12.2
      GCLOUD_VERSION: 392.0.0
      TERRAFORM_VERSION: 1.2.4
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      GOOS: << parameters.target_os >>
      GOARCH: << parameters.target_arch >>
    working_directory: ~/repo
    executor: linux
    parameters:
      target_arch:
        type: string
      target_os:
        type: string

    steps:
      - checkout
      - run:
          name: Echos
          command: |
            echo "GOOS => $GOOS"
            echo "GOARCH => $GOARCH"
      - run:
          name: Install Go
          command: |
            curl -s -L -O "https://dl.google.com/go$GOVER.$GOOS-$GOARCH.tar.gz"
            rm -rf /usr/local && tar -C /usr/local -xzf "go$GOVER.$GOOS-$GOARCH.tar.gz"
            export PATH=$PATH:/usr/local/go/bin
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install Dependencies
          command: go get ./...

      - run:
          name: Install IPFS@$IPFS_VERSION
          command: |
            export IPFS_BUILD="$GOOS-$GOARCH"
            curl -s -L -O "https://dist.ipfs.io/go-ipfs/${IPFS_VERSION}/go-ipfs_${IPFS_VERSION}_${IPFS_BUILD}.tar.gz"
            tar -xvzf "go-ipfs_${IPFS_VERSION}_${IPFS_BUILD}.tar.gz"
            sudo bash ./go-ipfs/install.sh

      - when:
          condition:
            and:
              - equal: ['linux', << parameters.target_os >>]
              - equal: ['amd64', << parameters.target_arch >>]
          steps:
            - run:
                name: Setup GCloud@$GCLOUD_VERSION
                command: |
                  export GCLOUD_TARBALL="google-cloud-cli-${GCLOUD_VERSION}-linux-x86_64.tar.gz"
                  curl -s -L -O "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/${GCLOUD_TARBALL}"
                  tar -xf "${GCLOUD_TARBALL}"
                  ./google-cloud-sdk/install.sh --quiet
            - run:
                name: Install golangci-lint@$GOLANGCILINT_VERSION
                command: |
                    # binary will be /usr/local/go/bin/bin/golangci-lint
                    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/go/bin $GOLANGCILINT_VER
                    golangci-lint --version
            - run:
                name: Install terraform@$TERRAFORM_VERSION
                command: |
                  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
                  sudo apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
                  sudo apt-get -y update && sudo apt-get -y install terraform=$TERRAFORM_VERSION

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - when:
          condition:
            and:
              - equal: ['linux', << parameters.target_os >>]
              - equal: ['amd64', << parameters.target_arch >>]
          steps:
            - run:
                name: Run go mod tidy check diff
                command: make modtidy check-diff
      - run:
          name: Build
          command: GO111MODULE=on make build

      - when:
          condition:
            and:
              - equal: ['linux', << parameters.target_os >>]
              - equal: ['amd64', << parameters.target_arch >>]
          steps:
            - run:
                name: Test
                command: |
                  go test -v $(go list ./... | circleci tests split --split-by=timings)

            - when:
                condition:
                  equal: ['circleci-project-setup', {{ .Branch }}]
                steps:
                  - run:
                      name: Setup GCloud
                      command: |
                        echo "$GOOGLE_APPLICATION_DEVELOPMENT_CREDENTIALS" > /tmp/$CIRCLE_WORKFLOW_JOB_ID.json
                        
                  - run:
                      name: Authenticate to Google Cloud
                      command: |
                        gcloud auth activate-service-account --key-file /tmp/$CIRCLE_WORKFLOW_JOB_ID.json

                  - run:
                      name: Install development cluster
                      command: |
                        cd ops/terraform && terraform init && \
                                            terraform workspace select development && \
                                            terraform apply -auto-approve --var-file=development.tfvars

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-workflow:
    jobs:
      - build:
          name: ubuntu-amd64
          target_os: linux
          target_arch: amd64
      - build:
          name: macOS-arm64
          target_os: darwin
          target_arch: arm64
      - build:
          name: macOS-amd64
          target_os: darwin
          target_arch: amd64
