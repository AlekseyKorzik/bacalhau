// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *StorageSpec) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{170}); err != nil {
		return err
	}

	// t.S3 (model.S3StorageSpec) (struct)
	if len("S3") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"S3\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("S3"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("S3")); err != nil {
		return err
	}

	if err := t.S3.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.CID (string) (string)
	if len("CID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CID")); err != nil {
		return err
	}

	if len(t.CID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CID)); err != nil {
		return err
	}

	// t.URL (string) (string)
	if len("URL") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"URL\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("URL"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("URL")); err != nil {
		return err
	}

	if len(t.URL) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.URL was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.URL))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.URL)); err != nil {
		return err
	}

	// t.Name (string) (string)
	if len("Name") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Name\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Name"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Name")); err != nil {
		return err
	}

	if len(t.Name) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Name was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Name))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Name)); err != nil {
		return err
	}

	// t.Path (string) (string)
	if len("Path") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Path\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Path"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Path")); err != nil {
		return err
	}

	if len(t.Path) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Path was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Path))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Path)); err != nil {
		return err
	}

	// t.Repo (string) (string)
	if len("Repo") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Repo\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Repo"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Repo")); err != nil {
		return err
	}

	if len(t.Repo) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Repo was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Repo))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Repo)); err != nil {
		return err
	}

	// t.Inline ([]uint8) (slice)
	if len("Inline") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Inline\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Inline"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Inline")); err != nil {
		return err
	}

	if len(t.Inline) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Inline was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Inline))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Inline[:]); err != nil {
		return err
	}

	// t.Metadata ([]model.KV) (slice)
	if len("Metadata") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Metadata\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Metadata"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Metadata")); err != nil {
		return err
	}

	if len(t.Metadata) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Metadata was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Metadata))); err != nil {
		return err
	}
	for _, v := range t.Metadata {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.SourcePath (string) (string)
	if len("SourcePath") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"SourcePath\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("SourcePath"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("SourcePath")); err != nil {
		return err
	}

	if len(t.SourcePath) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.SourcePath was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.SourcePath))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.SourcePath)); err != nil {
		return err
	}

	// t.StorageSource (model.StorageSourceType) (uint8)
	if len("StorageSource") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"StorageSource\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("StorageSource"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("StorageSource")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.StorageSource)); err != nil {
		return err
	}
	return nil
}

func (t *StorageSpec) UnmarshalCBOR(r io.Reader) (err error) {
	*t = StorageSpec{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("StorageSpec: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.S3 (model.S3StorageSpec) (struct)
		case "S3":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.S3 = new(S3StorageSpec)
					if err := t.S3.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.S3 pointer: %w", err)
					}
				}

			}
			// t.CID (string) (string)
		case "CID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CID = string(sval)
			}
			// t.URL (string) (string)
		case "URL":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.URL = string(sval)
			}
			// t.Name (string) (string)
		case "Name":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Name = string(sval)
			}
			// t.Path (string) (string)
		case "Path":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Path = string(sval)
			}
			// t.Repo (string) (string)
		case "Repo":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Repo = string(sval)
			}
			// t.Inline ([]uint8) (slice)
		case "Inline":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Inline: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Inline = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Inline[:]); err != nil {
				return err
			}
			// t.Metadata ([]model.KV) (slice)
		case "Metadata":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Metadata: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Metadata = make([]KV, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v KV
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Metadata[i] = v
			}

			// t.SourcePath (string) (string)
		case "SourcePath":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.SourcePath = string(sval)
			}
			// t.StorageSource (model.StorageSourceType) (uint8)
		case "StorageSource":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajUnsignedInt {
				return fmt.Errorf("wrong type for uint8 field")
			}
			if extra > math.MaxUint8 {
				return fmt.Errorf("integer in input was too large for uint8 field")
			}
			t.StorageSource = StorageSourceType(extra)

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *S3StorageSpec) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{166}); err != nil {
		return err
	}

	// t.Key (string) (string)
	if len("Key") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Key\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Key"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Key")); err != nil {
		return err
	}

	if len(t.Key) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Key was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Key))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Key)); err != nil {
		return err
	}

	// t.Bucket (string) (string)
	if len("Bucket") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Bucket\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Bucket"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Bucket")); err != nil {
		return err
	}

	if len(t.Bucket) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Bucket was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Bucket))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Bucket)); err != nil {
		return err
	}

	// t.Region (string) (string)
	if len("Region") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Region\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Region"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Region")); err != nil {
		return err
	}

	if len(t.Region) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Region was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Region))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Region)); err != nil {
		return err
	}

	// t.Endpoint (string) (string)
	if len("Endpoint") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Endpoint\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Endpoint"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Endpoint")); err != nil {
		return err
	}

	if len(t.Endpoint) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Endpoint was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Endpoint))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Endpoint)); err != nil {
		return err
	}

	// t.VersionID (string) (string)
	if len("VersionID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"VersionID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("VersionID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("VersionID")); err != nil {
		return err
	}

	if len(t.VersionID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.VersionID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.VersionID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.VersionID)); err != nil {
		return err
	}

	// t.ChecksumSHA256 (string) (string)
	if len("ChecksumSHA256") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ChecksumSHA256\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ChecksumSHA256"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ChecksumSHA256")); err != nil {
		return err
	}

	if len(t.ChecksumSHA256) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ChecksumSHA256 was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ChecksumSHA256))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ChecksumSHA256)); err != nil {
		return err
	}
	return nil
}

func (t *S3StorageSpec) UnmarshalCBOR(r io.Reader) (err error) {
	*t = S3StorageSpec{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("S3StorageSpec: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Key (string) (string)
		case "Key":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Key = string(sval)
			}
			// t.Bucket (string) (string)
		case "Bucket":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Bucket = string(sval)
			}
			// t.Region (string) (string)
		case "Region":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Region = string(sval)
			}
			// t.Endpoint (string) (string)
		case "Endpoint":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Endpoint = string(sval)
			}
			// t.VersionID (string) (string)
		case "VersionID":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.VersionID = string(sval)
			}
			// t.ChecksumSHA256 (string) (string)
		case "ChecksumSHA256":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ChecksumSHA256 = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *JobSpecWasm) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{165}); err != nil {
		return err
	}

	// t.EntryPoint (string) (string)
	if len("EntryPoint") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EntryPoint\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EntryPoint"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EntryPoint")); err != nil {
		return err
	}

	if len(t.EntryPoint) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.EntryPoint was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.EntryPoint))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.EntryPoint)); err != nil {
		return err
	}

	// t.Parameters ([]string) (slice)
	if len("Parameters") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Parameters\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Parameters"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Parameters")); err != nil {
		return err
	}

	if len(t.Parameters) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Parameters was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Parameters))); err != nil {
		return err
	}
	for _, v := range t.Parameters {
		if len(v) > cbg.MaxLength {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(v)); err != nil {
			return err
		}
	}

	// t.EntryModule (model.StorageSpec) (struct)
	if len("EntryModule") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EntryModule\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EntryModule"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EntryModule")); err != nil {
		return err
	}

	if err := t.EntryModule.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.ImportModules ([]model.StorageSpec) (slice)
	if len("ImportModules") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ImportModules\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ImportModules"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ImportModules")); err != nil {
		return err
	}

	if len(t.ImportModules) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.ImportModules was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.ImportModules))); err != nil {
		return err
	}
	for _, v := range t.ImportModules {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.EnvironmentVariables ([]model.KV) (slice)
	if len("EnvironmentVariables") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EnvironmentVariables\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EnvironmentVariables"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EnvironmentVariables")); err != nil {
		return err
	}

	if len(t.EnvironmentVariables) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.EnvironmentVariables was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.EnvironmentVariables))); err != nil {
		return err
	}
	for _, v := range t.EnvironmentVariables {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *JobSpecWasm) UnmarshalCBOR(r io.Reader) (err error) {
	*t = JobSpecWasm{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("JobSpecWasm: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.EntryPoint (string) (string)
		case "EntryPoint":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.EntryPoint = string(sval)
			}
			// t.Parameters ([]string) (slice)
		case "Parameters":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Parameters: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Parameters = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.Parameters[i] = string(sval)
				}
			}

			// t.EntryModule (model.StorageSpec) (struct)
		case "EntryModule":

			{

				if err := t.EntryModule.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.EntryModule: %w", err)
				}

			}
			// t.ImportModules ([]model.StorageSpec) (slice)
		case "ImportModules":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.ImportModules: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.ImportModules = make([]StorageSpec, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v StorageSpec
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.ImportModules[i] = v
			}

			// t.EnvironmentVariables ([]model.KV) (slice)
		case "EnvironmentVariables":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.EnvironmentVariables: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.EnvironmentVariables = make([]KV, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v KV
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.EnvironmentVariables[i] = v
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *JobSpecDocker) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.Image (string) (string)
	if len("Image") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Image\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Image"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Image")); err != nil {
		return err
	}

	if len(t.Image) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Image was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Image))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Image)); err != nil {
		return err
	}

	// t.Entrypoint ([]string) (slice)
	if len("Entrypoint") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Entrypoint\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Entrypoint"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Entrypoint")); err != nil {
		return err
	}

	if len(t.Entrypoint) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Entrypoint was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Entrypoint))); err != nil {
		return err
	}
	for _, v := range t.Entrypoint {
		if len(v) > cbg.MaxLength {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(v)); err != nil {
			return err
		}
	}

	// t.WorkingDirectory (string) (string)
	if len("WorkingDirectory") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"WorkingDirectory\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("WorkingDirectory"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("WorkingDirectory")); err != nil {
		return err
	}

	if len(t.WorkingDirectory) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.WorkingDirectory was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.WorkingDirectory))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.WorkingDirectory)); err != nil {
		return err
	}

	// t.EnvironmentVariables ([]string) (slice)
	if len("EnvironmentVariables") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"EnvironmentVariables\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("EnvironmentVariables"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("EnvironmentVariables")); err != nil {
		return err
	}

	if len(t.EnvironmentVariables) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.EnvironmentVariables was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.EnvironmentVariables))); err != nil {
		return err
	}
	for _, v := range t.EnvironmentVariables {
		if len(v) > cbg.MaxLength {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := io.WriteString(w, string(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *JobSpecDocker) UnmarshalCBOR(r io.Reader) (err error) {
	*t = JobSpecDocker{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("JobSpecDocker: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Image (string) (string)
		case "Image":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Image = string(sval)
			}
			// t.Entrypoint ([]string) (slice)
		case "Entrypoint":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Entrypoint: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Entrypoint = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.Entrypoint[i] = string(sval)
				}
			}

			// t.WorkingDirectory (string) (string)
		case "WorkingDirectory":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.WorkingDirectory = string(sval)
			}
			// t.EnvironmentVariables ([]string) (slice)
		case "EnvironmentVariables":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.EnvironmentVariables: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.EnvironmentVariables = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					t.EnvironmentVariables[i] = string(sval)
				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *KV) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Key (string) (string)
	if len("Key") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Key\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Key"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Key")); err != nil {
		return err
	}

	if len(t.Key) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Key was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Key))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Key)); err != nil {
		return err
	}

	// t.Value (string) (string)
	if len("Value") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Value\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Value"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Value")); err != nil {
		return err
	}

	if len(t.Value) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Value was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Value))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Value)); err != nil {
		return err
	}
	return nil
}

func (t *KV) UnmarshalCBOR(r io.Reader) (err error) {
	*t = KV{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("KV: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Key (string) (string)
		case "Key":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Key = string(sval)
			}
			// t.Value (string) (string)
		case "Value":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Value = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
